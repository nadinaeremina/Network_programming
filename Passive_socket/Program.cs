using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net; // подключаем пр-во имен 
using System.Net.Sockets; // подключаем пр-во имен 
using System.Text;

namespace Passive_socket
{
    class Program
    {
        static void Main(string[] args)
        {
            /////////////////// Установление синхронного соед-ия со стороны сервера /////////////////////
            /// Пассивный сокет

            // Мы говорим серверу - у тебя есть такой ip-адрес и такой порт, сиди и жди,
            // когда к тебе подключатся активные сокеты с этой инф-ей
            // Для каждого клиента создается отдельный сокет со своим портом - после получения данных - закрываем сокет

            // создаем ip-адрес (адрес компа) // в глобальной и в локальной сети будут разные ip
            IPAddress ip = IPAddress.Parse("127.0.0.1"); // адрес указывает на этот же комп

            // будет описывать, где мы ждем поключение
            IPEndPoint ep = new IPEndPoint(ip, 1024);
            // нам нужно определить по порту, к какому приложению предназначено сообщение

            // создаем сокет и подключаем к интернету
            Socket s = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.IP);

            s.Bind(ep);
            // говорим - реагируй, когда будем обращаться к этому ip и проверяй, обращаются к твоему порту или нет
            // не факт, что все, кто обращаются к ip-"127.0.0.1" - обращаются к порту '1024' // привязали компу

            s.Listen(10); // говорим-начни слушать 
            // число определяет, сколько max клиентов может обслуживать сервер одновременно
            // если не указать - определится автоматически
            // 11 клиент не сможет подключиться, пока не освободится 1 место (при синхронном подключении)

            try
            {
                // без этого цикла сервер обработает одного клиента и закроется
                while (true) // цикл для того, чтобы мы клиентов по одному обслуживали 
                {
                    // создаем новый сокет - его получаем из метода 'Accept'
                    Socket ns = s.Accept(); // программа блокируется и ждет, пока подключится клиент
                    // как только клиент подключится - 'Accept' разблокирует поток и вернет сокет, связанный с этим клиентом

                    Console.WriteLine(ns.RemoteEndPoint.ToString()); // выводим сообщение о том, какой клиент подключился

                    // отправляем обратную инф-цию клиенту // текущую дату
                    ns.Send(Encoding.ASCII.GetBytes(DateTime.Now.ToString()));

                    ns.Shutdown(SocketShutdown.Both); // закрываем подключение этого клиента
                }
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(ex.ToString());
                Console.ForegroundColor = ConsoleColor.White;
            }

            // запрос - telnet 127.0.0.1 1024
        }
    }
}
